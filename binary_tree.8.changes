'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!ReleaseBuilder prepareNewRelease!----SNAPSHOT----{8 July 2015 . 10:06:35 pm} Squeak4.5-15102.image priorSource: 0!----STARTUP----{8 July 2015 . 10:09:44 pm} as /home/cmm/Chris/dev/Squeak/Squeak4.5-15102.image!----SNAPSHOT----{8 July 2015 . 10:09:50 pm} Squeak4.6-15102.image priorSource: 122!----QUIT/NOSAVE----{8 July 2015 . 10:09:53 pm} Squeak4.6-15102.image priorSource: 303!----STARTUP----{2 March 2016 . 4:01:46 pm} as /home/sebastian/downloads/Squeak4.6-15102.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----STARTUP----{2 March 2016 . 4:04:28 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----STARTUP----{2 March 2016 . 4:11:13 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----STARTUP----{2 March 2016 . 4:11:22 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----STARTUP----{2 March 2016 . 4:11:29 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!SystemOrganization addCategory: #CSc668!Object subclass: #BinTree	instanceVariableNames: 'label left right'	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 16:15'!initialize: aLabel	 label := aLabel.! !!BinTree class methodsFor: 'nil' stamp: 'sb 3/2/2016 16:16'!new: label	^ super new initialize: label.! !!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 16:16'!print	Transcript show: label.! !!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 16:18' prior: 33556311!print	Transcript show: 'label'.! !a := BinTree new: 'A'!a print.!a := BinTree new: 'A'.a print.!Transcript clear.!Transcript clear.a := BinTree new: 'A'.a print.!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 16:19' prior: 33556432!print	Transcript show: label.! !Transcript clear.a := BinTree new: 'A'.a print.!----SNAPSHOT----{2 March 2016 . 4:19:26 pm} Squeak4.6-15102.image priorSource: 303!----SNAPSHOT----{2 March 2016 . 4:19:59 pm} Squeak4.6-15102.1.image priorSource: 2352!----QUIT----{2 March 2016 . 4:20:24 pm} Squeak4.6-15102.1.image priorSource: 2437!----STARTUP----{2 March 2016 . 4:20:43 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.1.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!Transcript clear.a := BinTree new: 'A'.a print.!----STARTUP----{2 March 2016 . 4:30:33 pm} as /home/sebastian/downloads/squeak4.6/Squeak4.6-15102.1.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----SNAPSHOT----{2 March 2016 . 4:50:11 pm} binary_tree.image priorSource: 2525!----QUIT/NOSAVE----{2 March 2016 . 4:50:17 pm} binary_tree.image priorSource: 3056!----STARTUP----{2 March 2016 . 4:50:32 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 16:52' prior: 33556698!print	Transcript show: label.	Transcript show: left.	Transcript show: right.! !Transcript clear.a := BinTree new: 'A'.a print.!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 16:52' prior: 33557934!print	Transcript show: label;cr.	Transcript show: left;cr.	Transcript show: right;cr.! !Transcript clear.a := BinTree new: 'A'.a print.!!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 16:54'!addLeftKid: kid	left := kid.! !!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 16:54'!addRightKid: kid	right := kid.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a print.b print.c print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.b addLeftKid: a.a addRightKid: c.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: 'b'.a addRightKid: c.a print.!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 17:05' prior: 33558157!print	Transcript show: label;cr.	Transcript show: left print;cr.	Transcript show: right;cr.! !!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 17:06' prior: 33559471!print	Transcript show: label;cr.	Transcript show: left print;cr.	Transcript show: right print ;cr.! !!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 17:06' prior: 33559656!print	Transcript show: label;cr.	Transcript show: left;cr.	Transcript show: right ;cr.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:09'!getLeft	left.! !!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:09'!getRight	right.! !!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:09'!getLabel	label.! !!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 19:10' prior: 33559848!print	Transcript show: label;cr.	Transcript show: left getLabel;cr.	Transcript show: right getLabel;cr.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.!Transcript show: b getLabel!b := BinTree new: 'B'.!Transcript show: b getLabel.!BinTree removeSelector: #getLabel!BinTree removeSelector: #getLeft!BinTree removeSelector: #getRight!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 19:18' prior: 33560388!print	Transcript show: label;cr.	Transcript show: left;cr.	Transcript show: right;cr.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.a print.b print.!!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:23'!getLabel	^ label.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.Transcript show: a getLabel;cr.!Transcript show: a getLabel;cr.Transcript show: b getLabel;cr.Transcript show: c getLabel;cr.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.Transcript show: a getLabel;cr.Transcript show: b getLabel;cr.Transcript show: c getLabel;cr.!!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:32'!getLeftKid	^ left.! !!BinTree methodsFor: 'nil' stamp: 'sb 3/2/2016 19:33'!getRighttKid	^ right.! !!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/2/2016 19:33'!getRightKid	^ right.! !Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.Transcript show: a getLabel;cr.Transcript show: a getLeftKid getLabel;cr.Transcript show: a getRightKid getLabel;cr.!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.Transcript show: a getLabel;cr.Transcript show: a getRightKid getLabel;cr.Transcript show: a getLeftKid getLabel;cr.!----SNAPSHOT----{2 March 2016 . 7:34:25 pm} binary_tree.image priorSource: 3056!Transcript clear.a := BinTree new: 'A'.b := BinTree new: 'B'.c := BinTree new: 'C'.a addLeftKid: b.a addRightKid: c.Transcript show: a getLabel;cr.Transcript show: a getRightKid getLabel;cr.Transcript show: a getLeftKid getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4!----SNAPSHOT----{3 March 2016 . 9:42:48 am} binary_tree.image priorSource: 8163!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLeftKid.Transcript show: node5 getRighttKid.Transcript show: node2 getLeftKid.Transcript show: node2 getRightKid.Transcript show: node7 getRighttKid.Transcript show: node7 getLeftKid.Transcript show: node3 getRightKid.!Transcript show: node5 getLeftKid getLabel.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLeftKid getLabel.Transcript show: node5 getRighttKid getLabel.Transcript show: node2 getLeftKid getLabel.Transcript show: node2 getRightKid getLabel.Transcript show: node7 getRighttKid getLabel.Transcript show: node7 getLeftKid getLabel.Transcript show: node3 getRightKid getLabel.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getRighttKid getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getRighttKid getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!----SNAPSHOT----{3 March 2016 . 9:46:05 am} binary_tree.image priorSource: 8909!Object subclass: #InorderTraversal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!Object subclass: #NameOfSubclass	instanceVariableNames: 'binTree'	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!NameOfSubclass methodsFor: 'nil' stamp: 'sb 3/3/2016 09:58'!initialize: aBinTree	binTree := aBinTree.! !!NameOfSubclass class methodsFor: 'nil' stamp: 'sb 3/3/2016 09:59'!new: aBinTree	^ super new initialize: aBinTree.! !Object subclass: #InorderTraversal	instanceVariableNames: 'binTree'	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 10:13'!initialize: aBinTree	binTree := aBinTree.! !!InorderTraversal class methodsFor: 'nil' stamp: 'sb 3/3/2016 10:14'!new: aBinTree	^ super new initialize: aBinTree.! !!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 10:18'!first	^ binTree getLeftKid.! !!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 10:18'!next	^ binTree getLeftKid.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 10:18' prior: 33568431!first	^ binTree getLabel.! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!traversal _ InorderTraversal new: node5.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.traversal _ InorderTraversal new: node5.!node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.traversal _ InorderTraversal new: node5.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.traversal _ InorderTraversal new: node5.!traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.!traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 13:17'!print	Transcript show: self label.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:18' prior: 33568654!first	^ self.! !traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!Transcript show: traversal next getLabel;cr!BinTree removeSelector: #getRighttKid!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:21' prior: 33576340!first	^ binTree getLabel.! !Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.!Transcript clear.!traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:26' prior: 33576205!print	Transcript show: self getLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:27' prior: 33578062!print	Transcript show: self.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:28' prior: 33578200!print	Transcript show: 'hello'.! !traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!nextLabel _ traversal first.!Transcript show: nextLabel.!Transcript show: nextLabel.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:32' prior: 33578329!print	Transcript show: binTree label.! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.nextLabel _ traversal first.Transcript show: nextLabel.!nextLabel _ traversal first.Transcript show: nextLabel.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:33' prior: 33579711!print	Transcript show: binTree getLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:34' prior: 33580999!print	Transcript show: 'Hello'.! !	^ self.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:35' prior: 33577699!first	^ self.! !nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:36' prior: 33581140!print	Transcript show: self getLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:37' prior: 33581283!first	^ binTree.! !nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:37' prior: 33581445!print	Transcript show: self.! !nextLabel _ traversal first.nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.nextLabel _ traversal first.nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first;cr.Transcript show: traversal next getLabel;cr.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 _ BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.Transcript show: traversal first getLabel;cr.Transcript show: traversal next getLabel;cr.!nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:39' prior: 33581748!print	Transcript show: self getLabel.! !nextLabel _ traversal first.nextLabel print.!Transcript clear.!nextLabel _ traversal first.nextLabel print.!nextLabel _ traversal first.!nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:40' prior: 33585129!print	Transcript show: binTree getLabel.! !nextLabel _ traversal first.nextLabel print.!nextLabel _ traversal first.!nextLabel _ traversal first.!nextLabel _ traversal first.nextLabel _ traversal next.!nextLabel _ traversal first.nextLabel _ traversal next.nextLabel print.!BinTree removeSelector: #print!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:42' prior: 33585433!print	Transcript show: self getLabel.! !	^ self.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:43' prior: 33581583!first	^ self.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:43' prior: 33586001!first	^ binTree getLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 13:45' prior: 33586115!first	^ binTree.! !InorderTraversal removeSelector: #print!!BinTree methodsFor: 'nil' stamp: 'sb 3/3/2016 13:46'!print	Transcript show: label.! !nextLabel _ traversal first.nextLabel print.!Transcript clear.!traversal _ InorderTraversal new: node5.Transcript show: traversal first getLabel;cr.Transcript show: traversal next getLabel;cr.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.!----STARTUP----{3 March 2016 . 1:48:35 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----QUIT/NOSAVE----{3 March 2016 . 1:52:43 pm} binary_tree.image priorSource: 12990!----STARTUP----{3 March 2016 . 1:53:13 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!Object subclass: #InorderTraversal	instanceVariableNames: 'binTree'	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 13:56'!initialize: aBinTree	binTree _ aBinTree.! !!InorderTraversal class methodsFor: 'nil' stamp: 'sb 3/3/2016 13:57'!new: aBinTree	^ super new initialize: aBinTree.! !----SNAPSHOT----{3 March 2016 . 1:57:09 pm} binary_tree.image priorSource: 12990!!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 13:58'!first	^ binTree.! !!InorderTraversal methodsFor: 'nil' stamp: 'sb 3/3/2016 13:59'!next	^ binTree getLeftKid.! !----SNAPSHOT----{3 March 2016 . 1:59:24 pm} binary_tree.image priorSource: 33091!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRighttKid getLabel;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.!traversal _ InorderTraversal new: node5.!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 14:01' prior: 33561052!print	self label.! !----SNAPSHOT----{3 March 2016 . 2:01:32 pm} binary_tree.image priorSource: 33354!BinTree removeSelector: #getRighttKid!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 14:02' prior: 33588899!print	self getLabel.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!----SNAPSHOT----{3 March 2016 . 2:03:04 pm} binary_tree.image priorSource: 34488!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!nextLabel print.!Transcript clear.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!BinTree methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 14:05' prior: 33589131!print	Transcript show: label.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!Transcript clear.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!----SNAPSHOT----{3 March 2016 . 2:07:14 pm} binary_tree.image priorSource: 34812!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!----SNAPSHOT----{3 March 2016 . 2:35:42 pm} binary_tree.image priorSource: 37776!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 14:35' prior: 33587756!next	| newKid |.	newKid _ binTree getLeftKid.	^ newKid.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!Transcript clear.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!!BinTree methodsFor: 'nil' stamp: 'sb 3/3/2016 14:37'!setLabel: aLabel	label _ aLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 14:37' prior: 33592695!next	| newKid |.	newKid _ binTree getLeftKid.	binTree setLabel: newKid.	^ newKid.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!Transcript clear.!node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.nextLabel _ traversal next.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 16:58' prior: 33587671!first	| nextLabel |	nextLabel _ binTree getLeftKid.	! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 16:59' prior: 33594960!first	| nextLabel |	nextLabel _ binTree getLeftKid.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		^ nextLabel.	]! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!nextLabel _ traversal first.!nextLabel print.!----SNAPSHOT----{3 March 2016 . 5:00:35 pm} binary_tree.image priorSource: 38083!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:06' prior: 33595115!first	| nextLabel |	nextLabel _ binTree label.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		^ nextLabel.	]! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:06' prior: 33596575!first	| nextLabel |	nextLabel _ binTree getLabel.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		^ nextLabel.	]! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:07' prior: 33596810!first	| nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		^ nextLabel.	]! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node2.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:09' prior: 33597048!first	| nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		]	nextLabel.	! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:10' prior: 33597456!first	| nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.		].	^ nextLabel.	! !traversal _ InorderTraversal new: node2.nextLabel _ traversal first.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.!Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.!traversal _ InorderTraversal new: node2.!nextLabel _ traversal first!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:14' prior: 33597685!first	| nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		nextLabel _ nextLabel getLeftKid.			^ nextLabel.	].! !traversal _ InorderTraversal new: node2.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:16' prior: 33598974!first	| previousLabel nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		previousLabel _ nextLabel.		nextLabel _ nextLabel getLeftKid.			^ previousLabel.	].! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:16' prior: 33599383!first	| previousLabel nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		previousLabel _ nextLabel.		nextLabel _ nextLabel getLeftKid.		].	^ previousLabel.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node2.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node7.nextLabel _ traversal first.nextLabel print.!----SNAPSHOT----{3 March 2016 . 5:17:46 pm} binary_tree.image priorSource: 41874!----SNAPSHOT----{3 March 2016 . 5:21:14 pm} binary_tree.image priorSource: 45765!Stack subclass: #BinStack	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:27' prior: 33599750!first	| stack previousLabel nextLabel |	stack _ BinStack new.	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		previousLabel _ nextLabel.		nextLabel _ nextLabel getLeftKid.		].	^ previousLabel.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:42' prior: 33600581!first	| stack nextLabel |	stack _ BinStack new.	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.		[nextLabel notNil]		ifFalse: [nextLabel _ stack pop]	].	^ nextLabel.! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.!Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.!traversal _ InorderTraversal new: node7.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:43' prior: 33600887!first	| stack nextLabel |	stack _ BinStack new.	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.		nextLabel notNil		ifFalse: [nextLabel _ stack pop]	].	^ nextLabel.! !----STARTUP----{3 March 2016 . 5:45:30 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:53' prior: 33599750!first	| nextLabel |	nextLabel _ binTree.	[nextLabel notNil] whileTrue: [			]! !Stack subclass: #BinStack	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSc668'!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 17:57' prior: 33602711!first	| nextLabel stack|	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: [		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.		nextLabel notNil		ifFalse: [nextLabel _ stack pop]	].	^nextLabel.! !----SNAPSHOT----{3 March 2016 . 5:58:02 pm} binary_tree.image priorSource: 45848!----SNAPSHOT----{3 March 2016 . 5:58:04 pm} binary_tree.1.image priorSource: 48819!----SNAPSHOT----{3 March 2016 . 5:58:10 pm} binary_tree.1.image priorSource: 48902!----STARTUP----{3 March 2016 . 6:00:04 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.1.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!SystemOrganization removeSystemCategory: 'Morphic-UserObjects'!SystemOrganization removeSystemCategory: 'EToy-UserObjects'!SystemOrganization removeSystemCategory: 'Morphic-Imported'!----QUIT/NOSAVE----{3 March 2016 . 6:03:02 pm} binary_tree.1.image priorSource: 48987!----STARTUP----{3 March 2016 . 6:03:05 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.1.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----SNAPSHOT----{3 March 2016 . 6:04:32 pm} binary_tree.1.image priorSource: 48987!----SNAPSHOT----{3 March 2016 . 6:04:35 pm} binary_tree.2.image priorSource: 49735!----STARTUP----{3 March 2016 . 6:05:20 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.2.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----STARTUP----{3 March 2016 . 6:06:02 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.2.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----SNAPSHOT----{3 March 2016 . 6:08:48 pm} binary_tree.2.image priorSource: 49820!----SNAPSHOT----{3 March 2016 . 6:08:52 pm} binary_tree.3.image priorSource: 50291!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:08' prior: 33603013!first	| nextLabel stack|	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: ["		stack push: nextLabel".		nextLabel _ nextLabel getLeftKid.	]."	nextLabel _ stack pop."	^nextLabel.! !----SNAPSHOT----{3 March 2016 . 6:10:13 pm} binary_tree.3.image priorSource: 50376!----SNAPSHOT----{3 March 2016 . 6:10:15 pm} binary_tree.4.image priorSource: 50770!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:10' prior: 33604990!first	| nextLabel stack temp |	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: [		temp _ nextLabel.		stack push: temp.		nextLabel _ nextLabel getLeftKid.	]."	nextLabel _ stack pop."	^nextLabel.! !----SNAPSHOT----{3 March 2016 . 6:10:48 pm} binary_tree.4.image priorSource: 50855!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:10' prior: 33605469!first	| nextLabel stack temp |	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: [		temp _ nextLabel.		stack push: temp.		nextLabel _ nextLabel getLeftKid.	].	nextLabel _ stack pop.	^nextLabel.! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node7.nextLabel _ traversal first.nextLabel print.!nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!----SNAPSHOT----{3 March 2016 . 6:11:29 pm} binary_tree.5.image priorSource: 51268!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:12' prior: 33605882!first	| nextLabel stack |	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: ["		temp _ nextLabel."		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.	].	nextLabel _ stack pop.	^nextLabel.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:12' prior: 33608308!first	| nextLabel stack |	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: [		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.	].	nextLabel _ stack pop.	^nextLabel.! !Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:13' prior: 33609812!first	| nextLabel stack |	nextLabel _ binTree.	stack _ BinStack new.	[nextLabel notNil] whileTrue: [		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.	].	nextLabel _ stack pop.	Transcript show: stack pop getLabel.	^nextLabel.! !traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'sb 3/3/2016 18:16' prior: 33611117!first	| nextLabel stack |	nextLabel _ binTree.	" Create a stack to hold passed over nodes "	stack _ BinStack new.	" Iterate through the nodes until the left most is reached. "	[nextLabel notNil] whileTrue: [		" Store current node on the stack "		stack push: nextLabel.		nextLabel _ nextLabel getLeftKid.	].	" Return the last node on the stack "		^ stack pop.! !----SNAPSHOT----{3 March 2016 . 6:16:30 pm} binary_tree.5.image priorSource: 53694!----SNAPSHOT----{3 March 2016 . 6:16:33 pm} binary_tree.6.image priorSource: 57494!traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!Transcript clear.node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4.Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr.traversal _ InorderTraversal new: node5.nextLabel _ traversal first.nextLabel print.!----SNAPSHOT----{3 March 2016 . 6:50:47 pm} binary_tree.7.image priorSource: 57579!Transcript clear." Build the nodes "node1 := BinTree new: 'A'.node2 := BinTree new: 'B'.node3 := BinTree new: 'C'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'." Form the tree "node5 addLeftKid: node2.node5 addRightKid: node7.node2 addLeftKid: node1.node2 addRightKid: node3.node7 addLeftKid: node6.node7 addRightKid: node8.node3 addRightKid: node4." Print parent then its left and right child "Transcript show: node5 getLabel;cr.Transcript show: node5 getLeftKid getLabel;cr.Transcript show: node5 getRightKid getLabel;cr;cr.Transcript show: node2 getLabel;cr.Transcript show: node2 getLeftKid getLabel;cr.Transcript show: node2 getRightKid getLabel;cr;cr.Transcript show: node7 getLabel;cr.Transcript show: node7 getLeftKid getLabel;cr.Transcript show: node7 getRightKid getLabel;cr;cr.Transcript show: node3 getLabel;cr.Transcript show: node3 getRightKid getLabel;cr;cr." Start traversal from tree root - E/node5 "traversal _ InorderTraversal new: node5." Navigate to first node in tree for inordertransversal "nextLabel _ traversal first.Transcript show: 'The inorder transversal of the tree starts at: '.nextLabel print." Implement next "!----SNAPSHOT----{3 March 2016 . 6:51:30 pm} binary_tree.8.image priorSource: 58752!----QUIT----{3 March 2016 . 6:51:37 pm} binary_tree.8.image priorSource: 60111!----STARTUP----{3 March 2016 . 6:51:49 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.8.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!----SNAPSHOT----{3 March 2016 . 6:53:38 pm} binary_tree.8.image priorSource: 60196!----QUIT----{3 March 2016 . 6:53:43 pm} binary_tree.8.image priorSource: 60470!----STARTUP----{3 March 2016 . 6:53:48 pm} as /home/sebastian/downloads/squeak4.6/binary_tree.8.image!'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!